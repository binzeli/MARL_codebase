class TwoDimWorld:
    def __init__(self, rows, columns, goal, agents, alpha, gamma):
        self.rows = rows
        self.columns = columns
        self.goal = goal
        self.agents = agents
        self.alpha = alpha
        self.gamma = gamma
        self.stateSpace = [(row, column) for row in range(rows) for column in range(columns)]
        self.actionSpace = ['up', 'down', 'left', 'right', 'stay']
        self.updateAgentActionSpace() 

    def updateAgentActionSpace(self):
        # store actionSpace in each agent
        for agent in self.agents:
            agent.actionSpace = self.actionSpace 


    def getAllAgentInitialStates(self):
        initialStates = [(0, 0) for _ in range(len(self.agents))]
        for i in range(len(self.agents)):
            self.agents[i].state = initialStates
        return initialStates
    

    def getAllAgentActions(self, allAgentStates, episode):
        return [self.agents[i].chooseAction(allAgentStates[i]) for i in range(len(self.agents))]


    def getAllAgentNextStates(self, allAgentCurrentStates, allAgentActions):
        return [self.getSingleAgentNextState(state, action) for (state, action) in zip(allAgentCurrentStates, allAgentActions)]



    def getAllAgentReward(self, allAgentActions, allAgentNextStates):
        for i in range(len(self.agents)):
            if allAgentActions[i] == 'stay':
                self.agents[i].reward = 0
            elif allAgentNextStates.count(self.goal) == len(self.agents):
                self.agents[i].reward = 1000
            elif allAgentNextStates[i] == self.goal:
                self.agents[i].reward = 100
            else:
                self.agents[i].reward = -1
        return [agent.reward for agent in self.agents]




    def getSingleAgentNextState(self, state, action):
        row, column = state
        if action == "up" and column < self.columns - 1:
            newSingleAgentState = (row, column + 1)
        elif action == "down" and column > 0:
            newSingleAgentState = (row, column - 1)
        elif action == "left" and row > 0:
            newSingleAgentState = (row - 1, column)
        elif action == "right" and row < self.rows - 1:
            newSingleAgentState = (row + 1, column)
        else:
            newSingleAgentState = state
        return newSingleAgentState
        

    def isTerminal(self, states):
        return all(state == self.goal for state in states)


